// Generated by CoffeeScript 1.6.3
(function () {
    var app;

    window.computedStyle = function (e, p, g) {
        g = window.getComputedStyle;
        return (g ? g(e) : e.currentStyle)[p.replace(/-(\w)/gi, function (w, l) {
            return l.toUpperCase();
        })];
    };

    app = angular.module('splitter', []);

    app.directive('splitter', ["$timeout", "$window", function ($timeout, $window) {
        return {
            restrict: 'A',
            link: function (scope, element, attrs) {
                var $, clientXProp, domElement, drag, draggingHandler, elementHeight, elementLeft, elementRight, elementTop, elementWidth, handler, handlers, heightProp, i, jqPane, jqPanes, left, leftProp, length, maxWidthProp, minWidthProp, pane, panes, topProp, vertical, verticalClass, widthProp, _fn, _i, _ref;
                panes = element.children();
                length = panes.length;
                if (length < 2) {
                    return;
                }
                domElement = element[0];
                element.css('position', 'absolute');
                $ = angular.element;
                vertical = attrs.vertical;
                if (vertical) {
                    widthProp = 'height';
                    heightProp = 'width';
                    minWidthProp = 'min-height';
                    maxWidthProp = 'max-height';
                    leftProp = 'top';
                    topProp = 'left';
                    clientXProp = 'clientY';
                    verticalClass = 'vertical';
                } else {
                    widthProp = 'width';
                    heightProp = 'height';
                    minWidthProp = 'min-width';
                    maxWidthProp = 'max-width';
                    leftProp = 'left';
                    topProp = 'top';
                    clientXProp = 'clientX';
                    verticalClass = 'horizontal';
                }
                elementHeight = computedStyle(domElement, heightProp);
                elementTop = computedStyle(domElement, topProp);
                elementLeft = parseInt(computedStyle(domElement, leftProp));
                elementWidth = parseInt(computedStyle(domElement, widthProp));
                elementRight = elementLeft + elementWidth;
                drag = draggingHandler = null;
                jqPanes = (function () {
                    var _i, _results;
                    _results = [];
                    for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
                        _results.push($(panes[i]));
                    }
                    return _results;
                })();
                handlers = [];
                pane = panes[length - 1];
                jqPane = jqPanes[length - 1];
                jqPane.css('position', 'absolute');
                pane.minWidth = parseInt(computedStyle(pane, minWidthProp) || '0');
                pane.width = parseInt(computedStyle(pane, widthProp) || jqPane.css(widthProp, '100px') && '100');
                _fn = function (handler, pane, i) {
                    return handler.bind('mousedown', function (ev) {
                        ev.preventDefault();
                        drag = true;
                        return draggingHandler = handler;
                    });
                };
                for (i = _i = 0, _ref = length - 1; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
                    pane = panes[i];
                    jqPane = jqPanes[i];
                    jqPane.css('position', 'absolute');
                    pane.minWidth = parseInt(computedStyle(pane, minWidthProp) || '0');
                    pane.width = parseInt(computedStyle(pane, widthProp) || jqPane.css(widthProp, '100px') && '100');
                    handler = angular.element('<div class="' + verticalClass + ' split-handler" style="position:absolute;"></div>');
                    left = left + jqPane.width;
                    handler.index = i;
                    handler.css(leftProp, computedStyle(panes[i + 1], leftProp));
                    handler.css(heightProp, elementHeight);
                    handler.css(topProp, elementTop);
                    jqPane.after(handler);
                    handlers.push(handler);
                    _fn(handler, pane, i);
                }
                element.bind('mousemove', function (ev) {
                    var pos, right;
                    if (!drag) {

                        return;
                    }
                    i = draggingHandler.index;
                    if (i < length - 2) {
                        handlers[i + 1].clicked = false;
                    }
                    var leftPane = panes[i];
                    var rightPane = panes[i + 1];
                    if (i === 0) {
                        left = elementLeft - 100;
                    } else {
                        left = parseInt(handlers[i - 1].css(leftProp));
                    }
                    if (i === length - 2) {
                        right = elementRight;
                    } else {
                        right = parseInt(handlers[i + 1].css(leftProp));
                    }
                    pos = ev[clientXProp];
                    //console.log(pos);
                    pos = pos - (pos * 0.1);
                    var posLeft = pos - left;



                    var leftPaneWidth = (pos - left) - 100;
                    if (posLeft < leftPane.minWidth) {
                        return;
                    }
                    var rightPos = right - pos;
                    if (rightPos < rightPane.minWidth) {
                        return;
                    }

                    jqPanes[i].css(widthProp, leftPaneWidth + 'px');
                    draggingHandler.css(leftProp, pos + 'px');
                    jqPanes[i + 1].css(leftProp, pos + 'px');
                    return jqPanes[i + 1].css(widthProp, rightPos + 'px');
                });
                return angular.element(document).bind('mouseup', function (ev) {
                    var w = angular.element($window);
                    $timeout(function () {
                        console.log("Resize FIRED!");
                        w.triggerHandler('resize');
                    });
                    return drag = false;
                });
            }
        };
    }]);

}).call(this);

/*
//@ sourceMappingURL=splitter-noclick.map
*/
